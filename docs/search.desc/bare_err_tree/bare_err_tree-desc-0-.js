searchState.loadedDescShard("bare_err_tree", 0, "<code>bare_err_tree</code> is a <code>no_std</code> and no <code>alloc</code> library to print an …\nDefines an <code>Error</code>’s temporary view as an <code>ErrTree</code> for …\nIntermediate struct for printing created by <code>AsErrTree</code>.\nProduces <code>ErrTree</code> formatted output for an error.\nCaptures extra information for <code>ErrTree</code> automatically.\nConstructs the <code>ErrTree</code> internally and calls <code>func</code> on it.\nImplements a type as an error tree.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor for when metadata needs to be hidden.\nReconstructs <code>ErrTree</code> formatted output from JSON.\nConsumes this tree to return its sources\nBoilerplate reducer for manual <code>ErrTree</code>.\nProduces JSON to store <code>ErrTree</code> formatted output.\nAlternative to <code>Result::unwrap</code> that formats the error as a …\nCommon constructor, with metadata.\nProvides a default <code>AsErrTree</code> for arbitrary <code>Error</code>s.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")